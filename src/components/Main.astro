---
import Grade from "./Grade.astro";
import Recommender from "./Recommender.astro";
import Stats from "./Stats.astro";
import QueryBox from "./QueryBox.astro";
import Navbar from "./Navbar.astro";
import Footer from "./Footer.astro";
import TranslatePopup from "./TranslatePopup.astro";
---

<div class="container">
  <Navbar />

  <div class="extension-body" id="ext-body">
    <Grade />
    <div class="dividerLine"></div>
    <Stats />
    <div class="dividerLine"></div>
    <Recommender />
  </div>
  <div class="settings-body" id="settings-body">Settings Page</div>
  <TranslatePopup original="" translated="" />
  <Footer />
</div>

<style>
  /**
   * TODO: Update fonts to design language
   */
  @import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css");

  body {
    margin: 0;
    font-family: BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial,
      sans-serif;
  }

  .container {
    height: 100vh;
    display: flex;
    flex-direction: column; /* Arrange items from top to bottom */
    justify-content: space-between;
    align-items: center;
    width: 400px;
    border: 1px black;
    background-color: #eee;
  }
  .extension-body {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    width: 400px;
    height: 70vh;
    padding: 20px;
  }
  .dividerLine {
    border-top: 1px solid #9399a0; /* Equivalent to border-t border-gray-500 in Tailwind */
    margin-top: 1.25rem; /* Equivalent to my-5 in Tailwind, assuming default spacing */
    margin-bottom: 1.25rem; /* Equivalent to my-5 in Tailwind, assuming default spacing */
    height: 1px;
    width: 380px;
    background-color: #5f6772;
  }

  .settings-body {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    width: 400px;
    height: 70vh;
    padding: 20px;
  }
</style>

<script>
  import { isReadingActive } from "../utils/store.js";

  const icons = document.querySelectorAll(".icon");
  icons.forEach((icon) => {
    icon.addEventListener("click", () => {
      icons.forEach((i) => i.classList.remove("active"));
      icon.classList.add("active");
    });
  });

  isReadingActive.subscribe((readingActive) => {
    if (!readingActive) {
      console.log(readingActive);
      const extensionBody = document.getElementById("ext-body");
      const settingsBody = document.getElementById("settings-body");
      if (extensionBody !== null && settingsBody !== null) {
        extensionBody.style.display = "none";
        settingsBody.style.display = "flex";
      }
    } else {
      console.log("here");
      const extensionBody = document.getElementById("ext-body");
      const settingsBody = document.getElementById("settings-body");
      if (extensionBody !== null && settingsBody !== null) {
        extensionBody.style.display = "flex";
        settingsBody.style.display = "none";
      }
    }
  });
</script>
